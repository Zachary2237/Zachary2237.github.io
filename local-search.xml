<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图的搜索</title>
    <link href="/2023/03/04/%E5%9B%BE%E7%9A%84%E6%90%9C%E7%B4%A2/"/>
    <url>/2023/03/04/%E5%9B%BE%E7%9A%84%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="图的搜索"><a href="#图的搜索" class="headerlink" title="图的搜索"></a>图的搜索</h1><p>图的搜索,整体来说思想都不算太难,主要是难在实现上,在很多时候,DFS和BFS都可以解决同一道问题,只是需要看个人更喜欢用哪个.而脱离图的限制,DFS和BFS也经常被应用.因此掌握深搜和广搜至关重要.本博客仅记录个人刷题遇到的问题,思路,和解法.部分解法不全且有更优解法.这篇博客放弃了对DFS和BFS的分类,如果可以,每道题都将展示两种做法.</p><p>脱离图而言,DFS比BFS的应用场景更广,DFS体现了递归的思想.而递归本身就可以称作一种算法.但是递归比较难理解,所以我常常想不到DFS的解法,更多情况下较容易理解的BFS更容易被想到.</p><h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><p>[733. 图像渲染 - 力扣（Leetcode）</p><p><a href="https://leetcode.cn/problems/flood-fill/description/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc"><img src="/%E5%9B%BE%E7%9A%84%E6%90%9C%E7%B4%A2/1.PNG" alt="1"></a></p><ul><li>BFS</li></ul><p>简单来讲就是从中心点开始,然后进行搜索,每次遇到相同初始颜色的就改变为目标颜色,唯一需要注意的就是要记录初始颜色,否则后面无法判断.题目还是很简单的.主要练习一下BFS的写法.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">floodFill</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; image, <span class="hljs-type">int</span> sr, <span class="hljs-type">int</span> sc, <span class="hljs-type">int</span> color) &#123;<br>        std::queue&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; que;<br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">vis</span>(image.<span class="hljs-built_in">size</span>(), std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(image[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(), <span class="hljs-number">0</span>));<br>        que.<span class="hljs-built_in">emplace</span>(sr, sc);<br>        <span class="hljs-type">int</span> curColor = image[sr][sc];<br>        vis[sr][sc] = <span class="hljs-number">1</span>;<br>        image[sr][sc] = color;<br>        <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">auto</span> [x, y] = que.<span class="hljs-built_in">front</span>();<br>            que.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                <span class="hljs-type">int</span> mx = x + dx[i];<br>                <span class="hljs-type">int</span> my = y + dy[i];<br>                <span class="hljs-keyword">if</span> (mx &gt;= <span class="hljs-number">0</span> &amp;&amp; mx &lt; image.<span class="hljs-built_in">size</span>() &amp;&amp; my &gt;= <span class="hljs-number">0</span> &amp;&amp; my &lt; image[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() &amp;&amp; image[mx][my] == curColor &amp;&amp; !vis[mx][my]) &#123;<br>                    image[mx][my] = color;<br>                    que.<span class="hljs-built_in">emplace</span>(mx, my);<br>                    vis[mx][my] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> image;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>DFS</li></ul><p>DFS就是从起始点开始,沿一个方向搜啊搜,直到搜不到为止,然后再回溯,换个方向搜.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; image, <span class="hljs-type">int</span> sr, <span class="hljs-type">int</span> sc, <span class="hljs-type">int</span> color, <span class="hljs-type">int</span> curColor)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (image[sr][sc] == curColor) &#123;<br>            image[sr][sc] = color;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                <span class="hljs-type">int</span> mx = sr + dx[i];<br>                <span class="hljs-type">int</span> my = sc + dy[i];<br>                <span class="hljs-keyword">if</span> (mx &gt;= <span class="hljs-number">0</span> &amp;&amp; mx &lt; image.<span class="hljs-built_in">size</span>() &amp;&amp; my &gt;= <span class="hljs-number">0</span> &amp;&amp; my &lt; image[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()) &#123;<br>                    <span class="hljs-built_in">dfs</span>(image, mx, my, color, curColor);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">floodFill</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; image, <span class="hljs-type">int</span> sr, <span class="hljs-type">int</span> sc, <span class="hljs-type">int</span> color) &#123;<br>        <span class="hljs-keyword">if</span> (image[sr][sc] == color) <span class="hljs-keyword">return</span> image;<br>        <span class="hljs-built_in">dfs</span>(image, sr, sc, color, image[sr][sc]);<br>        <span class="hljs-keyword">return</span> image;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><p><a href="https://leetcode.cn/problems/max-area-of-island/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">695. 岛屿的最大面积 - 力扣（Leetcode）</a></p><p><img src="/%E5%9B%BE%E7%9A%84%E6%90%9C%E7%B4%A2/2.PNG" alt="2"></p><ul><li>BFS</li></ul><p>也没啥好说的,直接一直更新最大值就行了,但是要注意记录这个点是否已经走过了,不然会超时.</p><p>这道题的特别之处就是要进行整张图的遍历,在遍历的过程中确定BFS的起点.然后在每一个起点上进行搜索并更新最大值.因此记录已走过的点至关重要.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxAreaOfIsland</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">vis</span>(grid.<span class="hljs-built_in">size</span>(), std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(), <span class="hljs-number">0</span>));<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; grid.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (grid[i][j]) &#123;<br>                    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>                    std::queue&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; que;<br>                    que.<span class="hljs-built_in">emplace</span>(i, j);<br>                    vis[i][j] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>()) &#123;<br>                        <span class="hljs-keyword">auto</span> [x, y] = que.<span class="hljs-built_in">front</span>();<br>                        que.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>                            <span class="hljs-type">int</span> mx = x + dx[k];<br>                            <span class="hljs-type">int</span> my = y + dy[k];<br>                            <span class="hljs-keyword">if</span> (mx &gt;= <span class="hljs-number">0</span> &amp;&amp; mx &lt; grid.<span class="hljs-built_in">size</span>() &amp;&amp; my &gt;= <span class="hljs-number">0</span> &amp;&amp; my &lt; grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() &amp;&amp; !vis[mx][my] &amp;&amp; grid[mx][my]) &#123;<br>                                res++;<br>                                vis[mx][my] = <span class="hljs-number">1</span>;<br>                                que.<span class="hljs-built_in">emplace</span>(mx, my);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    ans = std::<span class="hljs-built_in">max</span>(ans, res);                  <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/2023/02/27/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2023/02/27/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p>双指针是指在对数组进行遍历时使用两个指针进行遍历,常见的有对撞指针(一左一右)和快慢指针.双指针能够充分利用数组<strong>有序</strong>的特点,极大降低算法复杂度.双指针的思维并不难理解,关键在于何时使用双指针,以及怎样定义双指针来解决题目</p><h2 id="2-相关题目"><a href="#2-相关题目" class="headerlink" title="2. 相关题目"></a>2. 相关题目</h2><p>很难用几句话去描述何时选择双指针来解决问题,这里记录了我在刷题时遇到的双指针问题,目前的题目都较为简单,甚至可以不使用双指针进行解决,但是记录它们能够更好的培养算法思维,给予自己一定的灵感何时使用双指针</p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">977. 有序数组的平方 - 力扣（Leetcode）</a></p><p><img src="D:\hexo\hexo-blog\source_posts\assets\977.PNG" alt="977"></p><p>对于这个序列,我们将每个数字平方后会得到一个先递减再递增的序列.那么最小的元素一定出现在正负值交接的位置.我们可以先找到这个位置,然后使用两个指针,分别向左和向右遍历.每次遍历元素时选择绝对值小的加入数组并移动指针.当一边的指针到达末尾后,再依次加入另一侧的数字即可.时间复杂度小于等于O(N)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortedSquares</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-type">int</span> neg = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[i] &lt; <span class="hljs-number">0</span>) &#123;<br>    neg = i;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> pos = neg + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (neg &gt;= <span class="hljs-number">0</span> || pos &lt; nums.<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (neg &lt; <span class="hljs-number">0</span>) &#123;<br>    v.<span class="hljs-built_in">push_back</span>(nums[pos] * nums[pos]);<br>    pos++;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos &gt;= nums.<span class="hljs-built_in">size</span>()) &#123;<br>    v.<span class="hljs-built_in">push_back</span>(nums[neg] * nums[neg]);<br>    neg--;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (std::<span class="hljs-built_in">abs</span>(nums[pos]) &lt; std::<span class="hljs-built_in">abs</span>(nums[neg])) &#123;<br>    v.<span class="hljs-built_in">push_back</span>(nums[pos] * nums[pos]);<br>    pos++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    v.<span class="hljs-built_in">push_back</span>(nums[neg] * nums[neg]);<br>    neg--;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> v;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然而这道题仅仅是为了用双指针而用双指针,正常的话肯定是简单的取绝对值然后排序就好了.</p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p><a href="https://leetcode.cn/problems/rotate-array/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">189. 轮转数组 - 力扣（Leetcode）</a></p><p><img src="D:\hexo\hexo-blog\source_posts\assets\189.PNG" alt="189"></p><p>这道题呢,第一个想到的方法肯定不是双指针,可以新开辟一个数组,然后把每个数字放到对应的新位置上即可.</p><p>上一种方法的空间复杂度为O(N), 为了展现过人的思维能力(闲的没事),我们考虑用O(1)的空间复杂度来解决这道问题.</p><p>一个显而易见的事情是,当我们将数组的元素移动<code>k%n</code>个位置之后,尾部<code>k%n</code>个元素会移动到头部,其余元素向后移动<code>k%n</code>个位置.</p><p>基于这种思想,我们如果先将整个数组反转,那么尾部的<code>k%n</code>个元素就到了头部,其余元素到了尾部,接着,我们再分别将头部<code>k%n</code>个元素和尾部剩余元素进行翻转,就得到了正确的顺序.</p><p>以<code>n=7,k=3</code>为例:</p><p><img src="D:\hexo\hexo-blog\source_posts\assets\ｅｇ.PNG" alt="ｅｇ"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>std::<span class="hljs-built_in">swap</span>(nums[left], nums[right]);<br>left++;<br>right--;<br>&#125;<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-built_in">reverse</span>(nums, <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">reverse</span>(nums, <span class="hljs-number">0</span>, k % nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">reverse</span>(nums, k % nums.<span class="hljs-built_in">size</span>(), nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其实说这道题是双指针有点牵强,因为双指针并不是最核心的部分.但是这道题还是不错的.也放在这里了.</p><h3 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h3><p><a href="https://leetcode.cn/problems/move-zeroes/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">283. 移动零 - 力扣（Leetcode）</a></p><p><img src="D:\hexo\hexo-blog\source_posts\assets\２８３.PNG" alt="２８３"></p><p>这道题就有意思了,双指针的思路很明显,判断右指针的元素是否为0,如果为0,则右指针右移,否则与左指针的元素相交换.</p><p>一开始我没有想到交换这个巧妙的方法.我想等右指针到达末尾后依次补0,但是这样很容易很容易会出现问题,尤其是在数组长度为2时.故放弃.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; nums.<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (nums[right]) &#123;<br>    std::<span class="hljs-built_in">swap</span>(nums[left], nums[right]);<br>    left++;<br>    &#125;<br>    right++;<br>    &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="例题4"><a href="#例题4" class="headerlink" title="例题4"></a>例题4</h3><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">167. 两数之和 II - 输入有序数组 - 力扣（Leetcode）</a></p><p><img src="D:\hexo\hexo-blog\source_posts\assets\１６７.PNG" alt="１６７"></p><p>这道题很妙.本身难度并不大,用暴力也是可以解的,然而也有两种更巧妙的方法</p><ul><li>方法一:</li></ul><p>题目明确给出了数组<strong>有序</strong>这一条件.在我看到这一条件时,我第一时间想到的是二分,然后是双指针.然而我们不可能同时查找两个元素.因此我们可以固定左边的元素,查找右边的元素.查找的目标值为<code>target - numbers[left]</code>如果能够找到右边的元素,说明有答案,否则没有答案.这样的时间复杂度为<code>O(nlogn)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//方法一:利用数组有序的性质,固定左边元素,二分右边元素</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">size</span>(); i++) &#123;<br>    <span class="hljs-type">int</span> x = target - numbers[i];<br>    <span class="hljs-type">int</span> left = i + <span class="hljs-number">1</span>, right = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numbers[mid] &gt; x) &#123;<br>    right = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[mid] &lt; x) &#123;<br>    left = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> std::vector&lt;<span class="hljs-type">int</span>&gt; &#123;i + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> std::vector&lt;<span class="hljs-type">int</span>&gt; &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><p>既然可以二分,我们也可以考虑使用双指针.使用二分的局限在于必须要固定住左边的元素.如果我们试图同时查找左右两边的元素,我们就可以使用双指针.</p><p>与普通的双指针有所不同,本题使用双指针必须要充分应用数组<strong>有序</strong>这一条件.</p><p>我们初始化左右指针在数组的两端.</p><ul><li>如果此时两元素和比目标值大,则右指针左移.</li><li>如果比目标值小,则左指针右移</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">//方法二:同样利用数组有序,双指针法</span><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">if</span> (numbers[left] + numbers[right] &gt; target) &#123;<br>    right--;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[left] + numbers[right] &lt; target) &#123;<br>    left++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> std::vector&lt;<span class="hljs-type">int</span>&gt; &#123;left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> std::vector&lt;<span class="hljs-type">int</span>&gt; &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串相关例题"><a href="#字符串相关例题" class="headerlink" title="字符串相关例题"></a>字符串相关例题</h3><p>这两道字符串的题都比较简单,就当熟悉双指针和字符串操作了.</p><p><a href="https://leetcode.cn/problems/reverse-string/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">344. 反转字符串 - 力扣（Leetcode）</a></p><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string-iii/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">557. 反转字符串中的单词 III - 力扣（Leetcode）</a></p><h3 id="链表相关例题"><a href="#链表相关例题" class="headerlink" title="链表相关例题"></a>链表相关例题</h3><p>讲道理,双指针在链表中用的还是相当多的,等再刷链表的时候再做个整理.这里放两道简单且典型的</p><p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点 - 力扣（Leetcode）</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点 - 力扣（Leetcode）</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习日记</title>
    <link href="/2023/02/24/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <url>/2023/02/24/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="2-24"><a href="#2-24" class="headerlink" title="2-24"></a>2-24</h2><p>无课,放假ing</p><p>学习:二分查找,并更新了博客,刷了6道相关的题</p><h2 id="2-25"><a href="#2-25" class="headerlink" title="2-25"></a>2-25</h2><p>力扣双指针题目</p><h2 id="2-26"><a href="#2-26" class="headerlink" title="2-26"></a>2-26</h2><p>准备大物实验考试</p><h2 id="2-27"><a href="#2-27" class="headerlink" title="2-27"></a>2-27</h2><p>做完了算法入门的双指针题目,并更新了博客双指针.</p><p>接着是和hj聊天产生的对于未来规划的一点想法.</p><ol><li>考研or工作,早打算且只能二选一,如果考研提前准备数学英语,如果工作准备八股,算法,项目</li><li>外教和技术:外教课会耽误一部分时间,但是如果提前学过了就可以减少很多被耽误的时间</li><li>最重要最核心的部分:四大件,计组,计网,数据结构,操作系统.一定要学</li><li>hj的小建议:直接学考研的408,理解较为深刻.</li><li>时间紧张,抓紧行动.</li><li>形势不好.</li><li>Go语言会比较好找工作</li><li>项目很重要很重要</li></ol><h2 id="2-28"><a href="#2-28" class="headerlink" title="2-28"></a>2-28</h2><p>小摆烂,只做了每日一题,学习了一些C++.</p><p>今天国赛奖状到手了,很开心.</p><h2 id="3-1"><a href="#3-1" class="headerlink" title="3-1"></a>3-1</h2><p>学习了图,图的深搜,广搜,初步解除了两种搜索并完成了几道简单的题目.</p><p>学习了C++的模板</p><h2 id="3-2"><a href="#3-2" class="headerlink" title="3-2"></a>3-2</h2><p>学完C++函数模板,进入STL学习.学习了部分string</p><p>还额外需要理解:函数后面加const</p><h2 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h2><p>结束string的学习,学习部分vector</p><h2 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h2><p>刷题日,刷完了DFS和BFS的基础题目,开始写相关博客.</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2023/02/24/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/02/24/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="1-基本条件"><a href="#1-基本条件" class="headerlink" title="1.基本条件"></a>1.基本条件</h2><p>二分查找是个比较简单的算法,其思想很容易理解,二分法可以在O(logn)的时间复杂度上实现对有序序列的查找.</p><p>使用二分查找需要满足两个条件:</p><ul><li>查找的序列是有序的</li><li>查找的数量为1</li></ul><p>例如实现在一个有序且无重复元素的数组中查询某个元素的位置即可使用二分查找.</p><p>在实现二分查找中,除了需要注意题目是否满足查找的条件外,还要关注二分查找的重点:</p><ul><li>目标元素查找区间的定义</li><li>查找的区间定义:<ul><li>[left, right]</li><li>[left, right)</li></ul></li></ul><h2 id="2-例题"><a href="#2-例题" class="headerlink" title="2.例题"></a>2.例题</h2><p>我们以<a href="https://leetcode.cn/problems/binary-search/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">704. 二分查找 - 力扣（Leetcode）</a>作为例题,来描述一下二分查找.</p><blockquote><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例:</p><p>输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4</p><p>输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></blockquote><p>这是一道很标准的模板题,整个数组是<strong>重复</strong>的且没有重复元素.</p><ul><li>选择数组中间元素与目标值比较</li><li>若相等,返回该下标</li><li>若不相等:<ul><li>数组中间元素小于目标值,则中间及右边的元素全部大于目标值</li><li>数组中间元素大于目标值,则中间及左边的元素全部小于目标值</li></ul></li></ul><p>不断迭代,直到查找到目标元素.二分查找每次只查找一半的元素,时间复杂度为O(logn)</p><p>虽然二分查找的思想很简单,但是要考虑清楚具体区间的设计以及边界值是否进入到下一次的查找.</p><h2 id="3-左闭右闭区间写法"><a href="#3-左闭右闭区间写法" class="headerlink" title="3.左闭右闭区间写法:"></a>3.左闭右闭区间写法:</h2><p>[left, right]</p><p>无论是左闭右闭还是左闭右开的写法其实都差不多,但是都需要注意边界和循环条件的处理.</p><p>循环条件使用 <code> while (left &lt;= right)</code> 考虑target在<code>[left, right]</code>区间,当<code> left == right</code>时区间和结果都是有意义的.</p><p>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>        left = middle + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>        right = middle - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> middle;<br>        &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>需要注意的几个点:</p><ul><li><code> right</code>初值为<code>nums.size() - 1</code>, 保证区间<code>[left, right]</code></li><li>循环条件为 <code>while (left &lt;= right)</code></li></ul><p>当循环条件错误使用为 <code>while (left &lt; right)</code>时,会导致如下图的错误:</p><img src="/2023/02/24/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/eg.png" class=""><p><img src="D:\hexo\hexo-blog\source_posts\二分查找\eg.png" alt="eg"></p><p>当前一步<code>left</code>在6的位置时,会因为没有找到目标值而右移,在右移之后<code>left == right</code>,此时跳出了循环,而错过了正确值.</p><h2 id="4-左闭右开的写法"><a href="#4-左闭右开的写法" class="headerlink" title="4. 左闭右开的写法"></a>4. 左闭右开的写法</h2><p>类似的,为了保证区间及查询的有效性,需要注意:</p><ul><li>循环条件为 <code>while (left &lt; right)</code></li><li>判断条件 <code>if (nums[middle] &gt; target) right = middle</code></li><li>初值<code>right = nums.size()</code></li></ul><p>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search1</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>        right = middle;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>        left = middle + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> middle;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>当循环条件错误写为 <code>while (left &lt;= right)</code>时,会出现如下错误:</p><img src="/2023/02/24/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/eg1.png" class=""><p><img src="D:\hexo\hexo-blog\source_posts\二分查找\eg1.png" alt="eg1"></p><p>前一步<code>right</code> 在下标为8的位置,在进行本次判断时会造成死循环.</p><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目:"></a>相关题目:</h2><p><a href="https://leetcode.cn/problems/search-insert-position/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">35. 搜索插入位置 - 力扣（Leetcode）</a></p><p>板子题,没啥好说的</p><p><a href="https://leetcode.cn/problems/first-bad-version/?envType=study-plan&id=suan-fa-ru-men&plan=algorithms&plan_progress=fotpttc">278. 第一个错误的版本 - 力扣（Leetcode）</a></p><p>套了个函数的板子题</p><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（Leetcode）</a></p><p>34题还是比较有难度的,这里挖个坑,放上几天,下次回来填坑.</p><p><a href="https://leetcode.cn/problems/sqrtx/description/">69. x 的平方根 - 力扣（Leetcode）</a></p><p>69题是常见的面试题,还是很有意思的,我肯定不会直接想到二分查找,但是知道二分的思路还是比较好写的</p><p><a href="https://leetcode.cn/problems/valid-perfect-square/description/">367. 有效的完全平方数 - 力扣（Leetcode）</a></p><p>和69一模一样</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/24/hello-world/"/>
    <url>/2023/02/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一"><p><img src="/test.jpg" alt="图片引用方法二"></p><p><img src="/images/test.jpg" alt="图片引用方法三"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
